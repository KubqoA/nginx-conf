#!/bin/sh
#
## Nginx configuration manager
##
## Version: 2019-01-28
## Copyright (C) 2019 Jakub Arbet <jakub.arbet@protonmail.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#

set -e

if [ "$(id -u)" != "0" ]; then
   echo "This script must be run as root" 1>&2
   exit 1
fi

TEMPLATE_PATH=$(dirname "$0")/templates
DEFAULT_SSL_PATH=/etc/nginx/ssl
DEFAULT_VIRTUAL_HOSTS_PATH=/srv/www
DEFAULT_OWNER="www:www"

types() {
    echo "Available types: "
    ls -w 1 $TEMPLATE_PATH | sed "s/.conf//g;s/^/- /g"
}

usage() {
    echo "Usage: $0 [-hvbs] [-d directory] [-g giturl] [-o \"user:group\"] [-t type] <-c ssldomain> <domain>" && grep "[[:space:]])\ #" $0 | sed 's/#//' | sed -r 's/\) /-/';
    exit 1
}

version() {
    sed -n "/sed/d;s/## //gp" $0
}

type=default
skip_dir=false
ssldomain=
bootstrap=
git=
dir=
owner=

while getopts ":hvbst:g:r:d:o:c:" opt; do
  case ${opt} in
  b ) # create a new bootstrap of the selected type
      bootstrap=true
      ;;
  c ) # specify the SSL certificate domain which should be used
      ssldomain=${OPTARG}
      ;;
  d ) # specify the directory for the virtual host (defaults to /srv/www/DOMAIN)
      dir=${OPTARG}
      ;;
  g ) # clone provided git repository for the new webhost
      git=${OPTARG}
      ;;
  o ) # set the user and group owner of the virtual host directory (defaults to www:www)
      owner=${OPTARG}
      ;;
  s ) # skip directory creation
      skip_dir=true
      ;;
  t ) # type of virtual host
      type=${OPTARG}
      ;;
  v ) # output version information and exit
      version
      exit 0
      ;;
  h ) # display this help and exit
      usage
      ;;
  ? )
      echo "Invalid option: $OPTARG" 1>&2
      ;;
  : )
      echo "Invalid option: $OPTARG requires an argument" 1>&2
      ;;
   esac
done
shift $(($OPTIND - 1))

if [[ -z "$1" ]]; then
    echo "No domain specified"
    exit 1
fi

domain=$1

if [[ -e /etc/nginx/sites-available/$domain.conf ]]; then
    echo "Configuration for this domain already exists, remove it and then try again."
    exit 1
fi

ssldir=$DEFAULT_SSL_PATH/$ssldomain

if [[ -z $ssldomain ]]; then
    echo "-c option is required"
    exit 1
elif [[ ! -d $ssldir ]]; then
    echo "Directory with SSL certificates $ssldir does not exist."
    exit 1
fi

template=${TEMPLATE_PATH}/${type}.conf

if [[ ! -e $template ]]; then
    echo "Invalid type specified"
    types
    exit 1
fi

if [[ -z "$dir" ]]; then
    dir="$DEFAULT_VIRTUAL_HOSTS_PATH/$domain"
fi

publicdir=$dir/public
logsdir=$dir/logs

if [[ $skip_dir = false ]]; then
    if [[ -d $dir ]]; then
        echo "Directory $dir already exists and is not empty, specify another directory using the -d flag or remove the existing one."
        exit 1
    fi
    
    echo "Creating virtual host directory..."
    mkdir -p $dir
    
    if [[ -n $git ]]; then
        clonedir=$dir/public
        if [[ $type == "laravel" ]]; then
            clonedir=$dir
            logsdir=$dir/storage/logs
        fi
        git clone $git $clonedir
        mkdir -p $logsdir
    else
        mkdir $dir/logs
        mkdir $dir/public
        echo "<!doctype html><html><head><meta charset=\"utf-8\"><title>$domain</title></head><body><h1>$domain</h1></body></html>" > $dir/public/index.html
    fi
    
    if [[ -z $owner ]]; then
        owner=$DEFAULT_OWNER
    fi
    chown -R $owner $dir
    find $dir -type d -exec chmod 775 {} \;
    find $dir -type f -exec chmod 644 {} \;
    
    echo "Done!"
elif [[ -d $dir ]]; then
    echo "Directory $dir does not exist, create it manually, or omit the -s flag."
    exit 1
fi

echo "Creating virutal host configuration..."
cp $template /etc/nginx/sites-available/$domain.conf
sed -i "s#example.com#$domain#g;s#publicdir#$publicdir#g;s#logsdir#$logsdir#g;s#ssldir#$ssldir#g" /etc/nginx/sites-available/$domain.conf
ln -s /etc/nginx/sites-available/$domain.conf /etc/nginx/sites-enabled/
nginx -t

service nginx reload

exit 1
