#!/bin/sh
#
## Nginx configuration manager
##
## Version: 2019-01-23
## Copyright (C) 2019 Jakub Arbet <jakub.arbet@protonmail.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#

set -e

if [ "$(id -u)" != "0" ]; then
   echo "This script must be run as root" 1>&2
   exit 1
fi

TEMPLATE_PATH=$(dirname "$0")/templates
DEFAULT_VIRTUAL_HOSTS_PATH=/srv/www
DEFAULT_OWNER="www:www"

types() {
    echo "Available types: "
    ls -w 1 $TEMPLATE_PATH | sed "s/.conf//g;s/^/- /g"
}

usage() {
    echo "Usage: $0 [-hvb] [-d directory] [-g giturl] [-o \"user:group\"] [-t type] <domain>" && grep "[[:space:]])\ #" $0 | sed 's/#//' | sed -r 's/\) /-/';
    exit 1
}

version() {
    sed -n "/sed/d;s/## //gp" $0
}

type=default
bootstrap=
git=
dir=
owner=

while getopts ":hvbt:g:r:d:o:" opt; do
  case ${opt} in
  b ) # create a new bootstrap of the selected type
      bootstrap=true
      ;;
  d ) # specify the directory for the virtual host (defaults to /srv/www/DOMAIN)
      dir=${OPTARG}
      ;;
  g ) # clone provided git repository for the new webhost
      git=${OPTARG}
      ;;
  o ) # set the user and group owner of the virtual host directory (defaults to www:www)
      owner=${OPTARG}
      ;;
  t ) # type of virtual host
      type=${OPTARG}
      ;;
  v ) # output version information and exit
      version
      exit 0
      ;;
  h ) # display this help and exit
      usage
      ;;
  ? )
      echo "Invalid option: $OPTARG" 1>&2
      ;;
  : )
      echo "Invalid option: $OPTARG requires an argument" 1>&2
      ;;
   esac
done
shift $(($OPTIND - 1))

if [[ -z "$1" ]]; then
    echo "No domain specified"
    exit 1
fi

domain=$1

template=${TEMPLATE_PATH}/${type}.conf

if [[ ! -e $template ]]; then
    echo "Invalid type specified"
    types
    exit 1
fi

if [[ -z "$dir" ]]; then
    dir="$DEFAUlT_VIRTUAL_HOSTS_PATH/$domain"
fi

if [[ -d $dir ]]; then
    echo "Directory $dir already exists and is not empty, specify another directory using the -d flag or remove the existing one."
    exit 1
fi

echo "Creating virtual host directory..."
mkdir -p $dir

if [[ -n $git ]]; then
    clonedir=$dir/public
    if [[ $type == "laravel" ]]; then
        clonedir=$dir
    fi
    echo "Cloing specified git repository into $clonedir..."
    git clone $git $clonedir
#elif [[ -n $bootstrap ]]; then
#    echo "Bootstraping option not yet implemented."
else
    mkdir $dir/logs
    mkdir $dir/public
    echo "<!doctype html><html><head><meta charset=\"utf-8\"><title>$domain</title></head><body><h1>$domain</h1></body></html>" > $dir/public/index.html
fi

if [[ -z $owner ]]; then
    owner=$DEFAULT_OWNER
fi
chown -R $owner $dir
find $dir -type d -exec chmod 775 {} \;
find $dir -type f -exec chmod 644 {} \;

echo "Done!"

exit 1
